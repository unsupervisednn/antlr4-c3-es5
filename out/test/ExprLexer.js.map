{"version":3,"file":"ExprLexer.js","sourceRoot":"","sources":["../../test/ExprLexer.ts"],"names":[],"mappings":"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","sourcesContent":["// Generated from test/Expr.g4 by ANTLR 4.7.3-SNAPSHOT\n\n\nimport { ATN } from \"antlr4ts/atn/ATN\";\nimport { ATNDeserializer } from \"antlr4ts/atn/ATNDeserializer\";\nimport { CharStream } from \"antlr4ts/CharStream\";\nimport { Lexer } from \"antlr4ts/Lexer\";\nimport { LexerATNSimulator } from \"antlr4ts/atn/LexerATNSimulator\";\nimport { NotNull } from \"antlr4ts/Decorators\";\nimport { Override } from \"antlr4ts/Decorators\";\nimport { RuleContext } from \"antlr4ts/RuleContext\";\nimport { Vocabulary } from \"antlr4ts/Vocabulary\";\nimport { VocabularyImpl } from \"antlr4ts/VocabularyImpl\";\n\nimport * as Utils from \"antlr4ts/misc/Utils\";\n\n\nexport class ExprLexer extends Lexer {\n\tpublic static readonly VAR = 1;\n\tpublic static readonly LET = 2;\n\tpublic static readonly PLUS = 3;\n\tpublic static readonly MINUS = 4;\n\tpublic static readonly MULTIPLY = 5;\n\tpublic static readonly DIVIDE = 6;\n\tpublic static readonly EQUAL = 7;\n\tpublic static readonly OPEN_PAR = 8;\n\tpublic static readonly CLOSE_PAR = 9;\n\tpublic static readonly ID = 10;\n\tpublic static readonly WS = 11;\n\n\t// tslint:disable:no-trailing-whitespace\n\tpublic static readonly channelNames: string[] = [\n\t\t\"DEFAULT_TOKEN_CHANNEL\", \"HIDDEN\",\n\t];\n\n\t// tslint:disable:no-trailing-whitespace\n\tpublic static readonly modeNames: string[] = [\n\t\t\"DEFAULT_MODE\",\n\t];\n\n\tpublic static readonly ruleNames: string[] = [\n\t\t\"VAR\", \"LET\", \"PLUS\", \"MINUS\", \"MULTIPLY\", \"DIVIDE\", \"EQUAL\", \"OPEN_PAR\", \n\t\t\"CLOSE_PAR\", \"ID\", \"WS\",\n\t];\n\n\tprivate static readonly _LITERAL_NAMES: Array<string | undefined> = [\n\t\tundefined, undefined, undefined, \"'+'\", \"'-'\", \"'*'\", \"'/'\", \"'='\", \"'('\", \n\t\t\"')'\",\n\t];\n\tprivate static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [\n\t\tundefined, \"VAR\", \"LET\", \"PLUS\", \"MINUS\", \"MULTIPLY\", \"DIVIDE\", \"EQUAL\", \n\t\t\"OPEN_PAR\", \"CLOSE_PAR\", \"ID\", \"WS\",\n\t];\n\tpublic static readonly VOCABULARY: Vocabulary = new VocabularyImpl(ExprLexer._LITERAL_NAMES, ExprLexer._SYMBOLIC_NAMES, []);\n\n\t// @Override\n\t// @NotNull\n\tpublic get vocabulary(): Vocabulary {\n\t\treturn ExprLexer.VOCABULARY;\n\t}\n\t// tslint:enable:no-trailing-whitespace\n\n\n\tconstructor(input: CharStream) {\n\t\tsuper(input);\n\t\tthis._interp = new LexerATNSimulator(ExprLexer._ATN, this);\n\t}\n\n\t// @Override\n\tpublic get grammarFileName(): string { return \"Expr.g4\"; }\n\n\t// @Override\n\tpublic get ruleNames(): string[] { return ExprLexer.ruleNames; }\n\n\t// @Override\n\tpublic get serializedATN(): string { return ExprLexer._serializedATN; }\n\n\t// @Override\n\tpublic get channelNames(): string[] { return ExprLexer.channelNames; }\n\n\t// @Override\n\tpublic get modeNames(): string[] { return ExprLexer.modeNames; }\n\n\tpublic static readonly _serializedATN: string =\n\t\t\"\\x03\\uC91D\\uCABA\\u058D\\uAFBA\\u4F53\\u0607\\uEA8B\\uC241\\x02\\r:\\b\\x01\\x04\" +\n\t\t\"\\x02\\t\\x02\\x04\\x03\\t\\x03\\x04\\x04\\t\\x04\\x04\\x05\\t\\x05\\x04\\x06\\t\\x06\\x04\" +\n\t\t\"\\x07\\t\\x07\\x04\\b\\t\\b\\x04\\t\\t\\t\\x04\\n\\t\\n\\x04\\v\\t\\v\\x04\\f\\t\\f\\x03\\x02\\x03\" +\n\t\t\"\\x02\\x03\\x02\\x03\\x02\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x04\\x03\\x04\\x03\" +\n\t\t\"\\x05\\x03\\x05\\x03\\x06\\x03\\x06\\x03\\x07\\x03\\x07\\x03\\b\\x03\\b\\x03\\t\\x03\\t\\x03\" +\n\t\t\"\\n\\x03\\n\\x03\\v\\x03\\v\\x07\\v2\\n\\v\\f\\v\\x0E\\v5\\v\\v\\x03\\f\\x03\\f\\x03\\f\\x03\\f\" +\n\t\t\"\\x02\\x02\\x02\\r\\x03\\x02\\x03\\x05\\x02\\x04\\x07\\x02\\x05\\t\\x02\\x06\\v\\x02\\x07\" +\n\t\t\"\\r\\x02\\b\\x0F\\x02\\t\\x11\\x02\\n\\x13\\x02\\v\\x15\\x02\\f\\x17\\x02\\r\\x03\\x02\\v\\x04\" +\n\t\t\"\\x02XXxx\\x04\\x02CCcc\\x04\\x02TTtt\\x04\\x02NNnn\\x04\\x02GGgg\\x04\\x02VVvv\\x04\" +\n\t\t\"\\x02C\\\\c|\\x06\\x022;C\\\\aac|\\x05\\x02\\v\\f\\x0F\\x0F\\\"\\\"\\x02:\\x02\\x03\\x03\\x02\" +\n\t\t\"\\x02\\x02\\x02\\x05\\x03\\x02\\x02\\x02\\x02\\x07\\x03\\x02\\x02\\x02\\x02\\t\\x03\\x02\" +\n\t\t\"\\x02\\x02\\x02\\v\\x03\\x02\\x02\\x02\\x02\\r\\x03\\x02\\x02\\x02\\x02\\x0F\\x03\\x02\\x02\" +\n\t\t\"\\x02\\x02\\x11\\x03\\x02\\x02\\x02\\x02\\x13\\x03\\x02\\x02\\x02\\x02\\x15\\x03\\x02\\x02\" +\n\t\t\"\\x02\\x02\\x17\\x03\\x02\\x02\\x02\\x03\\x19\\x03\\x02\\x02\\x02\\x05\\x1D\\x03\\x02\\x02\" +\n\t\t\"\\x02\\x07!\\x03\\x02\\x02\\x02\\t#\\x03\\x02\\x02\\x02\\v%\\x03\\x02\\x02\\x02\\r\\'\\x03\" +\n\t\t\"\\x02\\x02\\x02\\x0F)\\x03\\x02\\x02\\x02\\x11+\\x03\\x02\\x02\\x02\\x13-\\x03\\x02\\x02\" +\n\t\t\"\\x02\\x15/\\x03\\x02\\x02\\x02\\x176\\x03\\x02\\x02\\x02\\x19\\x1A\\t\\x02\\x02\\x02\\x1A\" +\n\t\t\"\\x1B\\t\\x03\\x02\\x02\\x1B\\x1C\\t\\x04\\x02\\x02\\x1C\\x04\\x03\\x02\\x02\\x02\\x1D\\x1E\" +\n\t\t\"\\t\\x05\\x02\\x02\\x1E\\x1F\\t\\x06\\x02\\x02\\x1F \\t\\x07\\x02\\x02 \\x06\\x03\\x02\\x02\" +\n\t\t\"\\x02!\\\"\\x07-\\x02\\x02\\\"\\b\\x03\\x02\\x02\\x02#$\\x07/\\x02\\x02$\\n\\x03\\x02\\x02\" +\n\t\t\"\\x02%&\\x07,\\x02\\x02&\\f\\x03\\x02\\x02\\x02\\'(\\x071\\x02\\x02(\\x0E\\x03\\x02\\x02\" +\n\t\t\"\\x02)*\\x07?\\x02\\x02*\\x10\\x03\\x02\\x02\\x02+,\\x07*\\x02\\x02,\\x12\\x03\\x02\\x02\" +\n\t\t\"\\x02-.\\x07+\\x02\\x02.\\x14\\x03\\x02\\x02\\x02/3\\t\\b\\x02\\x0202\\t\\t\\x02\\x021\" +\n\t\t\"0\\x03\\x02\\x02\\x0225\\x03\\x02\\x02\\x0231\\x03\\x02\\x02\\x0234\\x03\\x02\\x02\\x02\" +\n\t\t\"4\\x16\\x03\\x02\\x02\\x0253\\x03\\x02\\x02\\x0267\\t\\n\\x02\\x0278\\x03\\x02\\x02\\x02\" +\n\t\t\"89\\b\\f\\x02\\x029\\x18\\x03\\x02\\x02\\x02\\x04\\x023\\x03\\x02\\x03\\x02\";\n\tpublic static __ATN: ATN;\n\tpublic static get _ATN(): ATN {\n\t\tif (!ExprLexer.__ATN) {\n\t\t\tExprLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(ExprLexer._serializedATN));\n\t\t}\n\n\t\treturn ExprLexer.__ATN;\n\t}\n\n}\n\n"]}